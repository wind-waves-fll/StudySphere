Maven是专门用于管理和构建Java项目的工具
功能：
    提供了一套标准化的项目结构
    提供了一套标准化的构建流程（编译，测试，打包，发布）
    提供了一套依赖管理机制
依赖管理：
    依赖管理其实就是管理你项目所依赖的第三方资源(jar包，插件)

Apache Maven是一个项目管理和构建工具
仓库：
    本地仓库：自己计算机上的一个目录
    中央仓库：由Maven团队维护的全球唯一的仓库
    远程仓库：一般有公司团队维护的私有仓库
当项目中使用坐标引入对应的jar包后，首先会查找本地仓库是否有对应的jar包：
    如果有，则在项目中直接引入
    如果没有，则去中央仓库中下载对应的jar包到本地仓库
还可以搭建远程仓库，将来jar包的查找顺序则变成：
    本地仓库->远程仓库->中央仓库
 

Maven的安装配置
    1. 下载一个压缩包并解压
        https://maven.apache.org/download.cgi
    2. 配置环境变量 MAVEN_HOME 为安装路径的bin目录
    3. 配置本地仓库：
        修改conf/settings.xml 中 <localRepository> 为一个指定目录
    4. 配置阿里云私服
        修改conf/settings.xml 中 <mirrors>标签
        <!-- 中央仓库在中国的镜像 -->
        <mirror>
            <id>alimaven</id>
            <name>aliyun maven</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <mirrorOf>central</mirrorOf>
        </mirror>

Maven常用命令：
    compile:编译
    clean:  清理
    test:   测试
    package:打包
    install:安装

Maven生命周期：
    Maven构建项目生命周期描述的是一次构建过程经历了多少个事件
    Maven对项目构建的生命周期分为3套(同一生命周期内，执行后边的命令，前面的所有命令会自动执行)
        1. clean    清理工作                        pre-clean  clean  post-clean
        2. default  核心工作，例如测试，打包，安装    compile    test    package   install
        3. site     产生报告，发布站点               pre-site   site   post-site

    
IDEA配置MAVEN：
    1. 选择IDEA中File --> settings
    2. 搜索maven
    3. 设置IDEA使用本地安装的Maven,并修改配置文件路径

Maven坐标详解：
    Maven中的坐标是资源的唯一标识
    使用坐标来定义项目或引入项目中的依赖
Maven坐标的主要组成:
    groupId:定义当前Maven项目隶属组织名称
    artifactId:定义当前Maven项目名
    version:定义当前项目版本号 

导入Maven项目
    右侧M + 
安装Maven插件：
    可以允许相关的命令
依赖管理（pom.xml）：
依赖范围：
    <scope>compile(默认值)</scope>
    通过设置坐标的依赖范围。可以设置对应jar包的作用范围：编译环境、测试环境、运行环境
    compile     编译、测试、运行都可以
    test        测试
    provided    编译和测试
    runtime     测试和运行
    system
    import




