public final class Arrays

常用方法：
1.  toString
    Arrays.toString(arr);可以直接将数组转为字符串
    public static String toString(int[] a) {
        if (a == null)
            return "null";
        int iMax = a.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(a[i]);
            if (i == iMax)
                return b.append(']').toString();
            b.append(", ");
        }
    }
2. sort排序（自然排序和定制排序）
    Arrays.sort(arr); //默认从小到大排序

    //定制排序，传入两个参数
        (1) 排序的数组 arr
        (2) 实现了Comparate的匿名内部类，需要实现compare方法

    public static <T> void sort(T[] a, Comparator<? super T> c) {
    Arrays.sort(arr,new Comparator(){
        @Override
        public int compare(Object o1, Object o2){
            Integer i1 = (Integer) o1;
            Integer i2 = (Integer) o2;
            return i1 - i2;   //从小到大
            return i2 - i1;   //从大到小
        }
    })
自定义定制排序
    如果return i1 - i2;   //从小到大
    如果return i2 - i1;   //从大到小
    public static void bubble01(int[] arr, Comparator c){
        int temp = 0;
        for (int i = 0; i < arr.length-1; i++) {
            for (int j = 0; j < arr.length - 1 - i; j++) {
                if(c.compare(arr[j],arr[j+1]) > 0){
                    temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }

            }
        }
    }
}

3.  binarySearch 通过二分搜索法进行查找，要求必须排好序
    int index = Arrays.binarySearch(3);
    不存在的话，返回一个负数。return -(low + 1); 


    public static int binarySearch(int[] a, int key) {
        return binarySearch0(a, 0, a.length, key);
    }

    private static int binarySearch0(int[] a, int fromIndex, int toIndex,
                                     int key) {
        int low = fromIndex;
        int high = toIndex - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            int midVal = a[mid];

            if (midVal < key)
                low = mid + 1;
            else if (midVal > key)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
    }
4.  copyOf 数组元素的复制
    public static int[] copyOf(int[] original, int newLength) {
        if (newLength == original.length) {
            return original.clone();
        }
        int[] copy = new int[newLength];
        System.arraycopy(original, 0, copy, 0,
                        Math.min(original.length, newLength));
        return copy;
    }
5.  fill 数组元素的填充 
    即将所有的值都改成val
    public static void fill(Object[] a, Object val) {
        for (int i = 0, len = a.length; i < len; i++)
            a[i] = val;
    }
6.  equals 比较两个数组元素内容是否完全一致
    boolean equals = Arrays.equals(arr1,arr2);
    如果一样，返回true
    如果不一样，返回false
7.  asList 将以阻止，转换成list
    将数据转换成一个List集合
    返回的asList编译类型是List
    返回的asList运行类型是class java.util.Arrays$ArrayList
    List asList = Arrays.asList(arr);





