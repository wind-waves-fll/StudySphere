ArrayList arrayList = new ArrayList();
arrayList.add(new Dog());
for(Object e : arrayList){
    Dog dog = (Dog) e;
}
如果程序员添加了一只猫，则编译器发现不了
问题：
1）不能对加入到集合ArrayList中的数据类型进行约束
2）遍历的时候，需要进行类型转换，如果集合中的数据量较大，对效率有影响
public class ArrayList<E> extends AbstractList<E>
ArrayList<Dog> arrayList = new ArrayList<Dog>();
1. 当我们ArrayList<Dog> 表示存放到 ArrayList 集合中的元素是Dog类型
2. 如果编译器发现添加的类型不满足要求，就会报错
3. 在遍历的时候，可以直接取出Dog类型而不是Object类型
4. 不使用泛型   Dog-->加入-->Object,  Object-->取出-->Dog
    使用泛型    Dog-->Dog-->Dog;//放入和取出不需要类型转换，提高效率

1. 泛型又称参数化类型，是JDK5 出现的新特性，解决数据类型的安全性问题
2. 在类声明或实例化时只要指定好需要的具体的类型即可
3. java泛型可以保证程序在编译时没有发出警告，运行时就不会产生
    ClassCastException异常。同时代码更加简洁，健壮
4. 泛型的作用：可以在类声明时通过一个标识表示类中某个属性的类型
    或者是某个方法的返回值的类型，或者是参数类型。  
    class Person<E>{
        E s;//编译的时候就确定了类型 s.getClass() 获得s的运行类型
    }
    interface 接口<T>{}
    class 类<K,V>{}

细节：
1. 不能使用基本数据类型
2. 在给泛型制定具体类型后，可以传入该类型和该类型的子类型
3. 泛型的使用形式,可以省略，编译器会进行推断。比较推荐这种写法。
    ArrayList<Integer> arrayList = new ArrayList<>()
4. 如果不写，默认是Object类型




自定义泛型：
1）普通成员可以使用泛型（属性，方法）
2）使用泛型的数组，不能初始化
3）静态方法中不能使用类的泛型
    因为静态是和类相关的，在类加载时，对象还没有创建，无法初始化
4）创建类的类型，是在创建对象时确定的(因为创建对象时，需要指定确定类型)
5）如果在创建对象时，没有指定类型，默认是Object

自定义泛型接口：
1）接口中，静态成员也不能使用泛型
2）泛型接口的类型，在继承接口或者实现接口时确定
3）没有指定类型，默认是Object

自定义泛型方法：
修饰符<T,R,...>  返回类型 方法名（参数列表）{

}
1. 泛型方法，可以定义在普通类中买也可以定义在泛型类中
2. 当泛型方法被调用时，类型会确定
3. public void eat(E e) 修饰符后没有<T,R,...>
    eat方法不是泛型方法，而是使用了泛型

泛型的继承和通配符
1. 泛型不具备继承关系
    不允许ArrayList<Object> arrayList = new ArrayList<String>();
2. <?>:支持任意泛型类型
3. <? extends A>: 支持A类以及A类的子类，规定了泛型的上限
4. <? super A>: 支持A类以及A类的父类，不限于直接父类，规定了泛型的下限











