线程同步机制：
1. 在多线程编程，一些数据不允许被多个线程同时访问
    此时就使用同步访问技术，保证数据在任何同一时刻
    最多有一个线程访问，以保证数据的完整性
2. 也可以这样理解，线程同步，即当有一个线程在对内存进行操作时，其他线程都不可以
    对这个内存地址进行操作，直到该线程完成操作，其他线程才能对该内存地址进行操作

同步具体方法-Synchronized
1. 同步代码块
    synchronized(对象){//得到对象的锁，才能操作同步代码
        //需要被同步的代码
    }
2. synchronized还可以放在方法声明中，表示整个方法为同步方法
    public synchronized void m(String name){//在某一时刻，只能有一个线程能执行该同步方法
        //需要被同步的代码
    }

互斥锁：
1. 每个对象都对应于一个可称为“互斥锁”的标记，这个标记用来保证
    在任一时刻，只能有一个线程可以访问该对象
2. 关键字synchronized来与对象的互斥锁联系，当某个对象用synchronized修饰时
    说明该对象在任意时刻只能由一个线程访问
3. 同步的局限性：导致程序的执行效率要降低
4. 同步方法（非静态）的锁可以是this（当前对象），也可以是其他对象
5. 同步方法（静态）的锁为当前类本身

注意事项和细节：
1. 同步方法如果没有static修饰：默认锁对象为this
2. 如果方法使用static修饰，默认锁对象：当前类.class
3. 实现同步的步骤：
    需要先分析上锁的代码
    选择同步代码块或同步方法
    要求多个线程的锁对象为同一个即可


一般就需要实现Runnable接口
如果是通过继承Thread方法实现，则需要是静态方法。