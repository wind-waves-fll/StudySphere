1. 代码块的调用优先于构造器
    普通代码块：
    {
        System.out.println("hello");
    }
    static代码块（也叫静态代码块）：
    作用是对类进行初始化，而且它随着类的加载而执行，并且只会执行一次，
    如果是普通代码块，每创建一个对象，就执行一次。

2. 类什么时候被加载：
    1. 创建对象实例时（new）
    2. 创建子类对象实例，父类也会被加载
    3. 使用类的静态成员时

3. 普通代码块，在创建对象实例时，会被隐式的调用。创建一次，调用一次
    如果只是使用类的静态成员时，普通代码块并不会执行。
 
4. 创建一个对象时，在一个类调用顺序是：
    1.调用静态代码块和静态属性初始化。（优先级一样，按顺序调用）
    2.调用普通代码块和普通属性的初始化。（优先级一样，按顺序调用）
    3.调用构造方法

5. 构造器的最前面其实隐含了super() 和调用普通代码块 
public class main_ {
    public static void main(String[] args) {
        BBB bbb = new BBB();
    }
}

class AAA{
    {
        System.out.println("AAA daimakuai");
    }
    public AAA() {
        System.out.println("AAA()");
    }
}

class BBB extends AAA{
    {
        System.out.println("BBB daimakuai");
    }
    public BBB() {
        System.out.println("BBB()");
    }
}
程序输出：
    AAA daimakuai
    AAA()
    BBB daimakuai
    BBB()

6. 创建一个子类时，他们的静态代码块，静态属性初始化，普通代码块，普通属性初始化，构造方法的调用顺序如下：
    1. 父类的静态代码块和静态属性
    2. 子类的静态代码块和静态属性
    3. 父类的普通代码块和普通属性
    4. 父类的构造方法
    5. 子类的普通代码块和普通属性
    6. 子类的构造方法

7. 静态代码块只能调用静态成员，普通代码块可以调用任意成员。