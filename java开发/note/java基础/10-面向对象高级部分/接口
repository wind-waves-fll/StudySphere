接口就是给出一些没有实现的方法，封装到一起，到某个类要使用的时候，再具体实现。
语法：
interface 接口名{
    //属性
    //方法(1.抽象方法2.默认实现方法default3.静态方法static)
}
class 类名 implements 接口{
    自己属性
    自己方法
    必须实现的接口的抽象方法
}
1. jdk7.0前，接口里的所有方法都没有方法体
2. jdk8.0后的接口可以有静态方法，默认方法也就是可以有方法的具体实现。


接口编程：
    可以控制类实现方法的名字，完成统一调度。
    项目经理为了控制和管理软件，会定义一些接口，然后由程序员实现。

1.接口不能被实例化
2.接口中的所有方法都是public，接口中的抽象方法，不用abstract修饰，可以省略
3.一个普通类实现接口，必须实现所有的方法，可以使用alt+enter来快速实现
4.抽象类实现接口，可以不同实现全部的抽象方法
5.一个类可以同时实现多个接口
    class Pig implements IB,IC{
        //实现IB,IC接口中的抽象方法
    }
6.接口中的属性，只能是final 而且是public static final修饰符，
    int a = 1  实际上 public static final int a = 1
7.接口中属性的访问形式：  接口名.属性名
8.一个接口不能继承其他类，但可以继承多个别的接口
    interface A extends B,C{

    }
9.接口的修饰符只能是public和默认，这点和类的修饰符是一样的。


实现接口和继承类：
    接口是对Java单继承机制的补充
    1.接口和继承解决的问题不同
        继承：主要是解决代码的复用性和维护性
        接口：设计好各种规范，让其他类去实现这些方法
    2.接口比继承更加灵活
        继承是满足is-a的关系，而接口只需满足like-a的关系
    3.接口在一定程度上实现代码解耦（即：接口规范性+动态绑定机制）

接口的多态特性：
    1.多态参数   
        即Usb usb,即可以接收手机参数，又可以接收相机参数，就体现出接口多态
        接口类型的对象可以指向实现了该接口的类的对象实例
    2.多态数组
        即Usb数组中，可以存放Phone和相机，可以通过instanceof来判断
        如usb[i] instanceof Phone 就执行其特有的方法
    3.接口存在多态传递现象
    如果IG继承了IH接口，而T实现了IG接口
    那么，实际上就相当于T类也实现了IH接口
    这就是所谓的接口多态传递
    public class InterfacePolyPass {
        public static void main(String[] args) {
            IG iG = new T();
            IH ih = new T();

        }
    }
    interface IH{}
    interface IG  extends IH{}

    class T implements IG{

    }

    访问接口的x使用A.x
    方位父类的x使用super.x
    public class InterfacePolyPass extends B implements A{
        public void px(){
            System.out.println(A.x);
            System.out.println(super.x);
        }
        public static void main(String[] args) {
            new InterfacePolyPass().px();

        }
    }
    interface A{
        int x = 0;
    }
    class B{
        int x = 1;
    }
