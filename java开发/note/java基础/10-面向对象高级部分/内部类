一个类的内部又完整的嵌套了另一个类结构。
被嵌套的类称为内部类，外层的称为外部类。
内部类的最大特点是可以直接访问私有成员，并且可以体现类与类之间的包含关系。

内部类的分类：
    1. 定义在外部类局部位置上（比如方法内）：
        1）局部内部类（有类名）
            1》可以直接访问外部类的所有成员，包括私有的
            2》不能添加访问修饰符，因为它的低位就是一个局部变量，局部变量是不能
                使用修饰符的，但是可以使用final修饰，因为局部变量可以使用final
            3》作用域：仅仅在定义它的方法或代码块中
            4》外部类访问局部内部类的成员
                访问方式：创建对象，在访问
            5》外部其他类不能访问局部内部类
            6》如果外部类和局部内部类的成员重名时，默认遵循就近原则，
            如果想要访问外部类的成员，则可以使用（外部类名.this.成员）去访问
        2）匿名内部类（没有类名，重点！！！！！！）
            匿名内部类是定义在外部类的局部位置，比如方法中，并且没有名字
                需求：想要使用接口IA，并创建对象
                传统方式：写一个类，实现该接口，并创建对象
                需求是该类只使用一次，后面不再使用
                可以使用匿名类来简化开发
            tiger的编译类型是IA，tiger的运行类型就是匿名内部类
            /*
                底层：
                class XXX implements IA{
                    @Override
                    public void  cry(){
                        System.out.println("cry")
                    }
                }
            */
            IA tiger = new IA(){
                @Override
                public void  cry(){
                    System.out.println("cry")
                }
            }
            
            1》匿名内部类的基本语法
                new 类或接口（参数列表）{
                    //参数列表会传递给类的构造器
                    类体
                }

            2》可以访问外部类的所有成员
            3》不能添加访问修饰符，因为它就是一个局部变量
            4》作用域仅仅在定义它的方法或代码块中
            5》外部其他类不能访问匿名内部类
            6》外部类和匿名内部类的成员重名时，匿名内部类访问的话，
                默认遵循就近原则，如果想要访问外部类的成员，则可以
                使用（外部类名.this.成员）去访问。

            匿名内部类可以当作实参直接传递，简洁高效

    2. 定义在外部类的成员位置上：
        1）成员内部类（没有static修饰）
            1》可以直接访问外部类的所有成员，包含私有的
            2》可以添加任意访问修饰符
            3》作用域：整个类体
            4》直接访问外部类所有成员：直接访问
            5》外部类访问成员内部类：创建成员内部类的对象，然后使用相关的方法
            6》外部其他s类--访问-->成员内部类
                1>外部类的一个对象，在new一个成员内部类
                2>在外部类中，编写一个方法，可以返回一个成员内部类的一个实例。
                3>
        2）静态内部类（有static修）
            1》可以访问外部类的所有静态成员，包含私有的，但不能访问非静态成员
            2》可以添加任意访问修饰符
            3》作用域：整个类体
            4》外部类访问静态内部类,访问方式:创建对象，再访问。
            5》外部其他类访问静态内部类
                因为是静态内部类，所以可以通过类名直接访问（需要满足访问权限）
                也可以编写一个方法，返回静态内部类的对象实例。需要创建外部对象
                也可以编写一个静态方法，返回静态内部类的对象实例。不需要创建外部对象
            6》如果外部类和静态内部类的成员重名时，遵循就近原则，如果想要访问外部类的成员
                则可以（外部类名.成员）来访问。
        



class Outer02{
    private int m = 0;
    private void m2(){}
    public void m1(){

        class Inner02{
            public void f1(){
                m2();
            }  
        }
        Inner02 inner02 = new Inner02();
        inner02.f1();
    }
}