Collection接口的常用方法：
1）add:添加单个元素
2）remove：删除指定元素
3）contains：查找元素是否存在
4）size:获取元素个数
5）isEmpty:判断是否为空
6）clear:清空
7）addAll:添加多个元素
8）containsAll:查找多个元素是否存在
9）removeAll:删除多个元素

public interface Collection<E> extends Iterable<E>
public interface Iterable<T> {
    /**
     * Returns an iterator over elements of type {@code T}.
     * 返回一个迭代器对象
     * @return an Iterator.
     */
    Iterator<T> iterator();
1）Iterator对象称为迭代器，主要用来遍历Collection集合中的元素
2）所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个
    实现了Iterator接口的对象，即可以返回一个迭代器
3）Iterator结构
    主要有两个方法：
        hasNext():判断是否还有下一个元素
        next():指针下移，将下移后集合位置上的元素返回
        Iterator iterator = col.iterator();
        while(iterator.hasNext()){
            Object obj = iterator.next();
            System.out.println("obj=",obj);
        }
        // 快速生成 while  ---->   init
        // 显示所有快捷键的快捷键  ctrl + j
        推出while循环后，这时的iterator迭代器，指向最后的元素
            即iterable.next()为空
        如果希望再次遍历，必须重置我们的迭代器。即Iterator iterator = col.iterator();

        增强for循环，可以代替iterable迭代器。
        底层其实还是返回一个迭代器对象，调用hasNext()和next()方法
        增强for循环就是简化版的iterator，本质一样，只能用于遍历集合或数组
        for(Object object：col){
            System.out.println(object);
        }

4）Iterator仅用于遍历集合，并不存放数据

List:
    List接口是Collection接口的子接口
    1）List集合类中元素有序，且可重复
    2）List集合中的每个元素都有索引
    3）List容器中的可以根据索引存取元素
        list.get(3);
    4）所有已知实现类:
        AbstractList, AbstractSequentialList, ArrayList, AttributeList, CopyOnWriteArrayList, LinkedList, RoleList, RoleUnresolvedList, Stack, Vector

主要方法：  
    1）add      增加一个元素      
    2）addAll   增加多个元素
    3）get      获取指定位置的元素
    4）indexOf  返回obj首次出现的位置
    5）lastIndexOf返沪obj最后出现的位置
    6）remove   移除指定位置的元素，并返回此元素
    7）set      设置指定位置的元素为else,相当于替换
                排序算法中使用set进行交换非常简单
    8）subList  返回从fromIndex到toIndex位置的集合

List的遍历方法：
1）使用iterator
2）增强for循环
3）普通for循环:可以通过get方法获取元素

ArrayList注意事项：
1）允许所有的元素，包括空元素，并且可以多个
2）ArrayList 是由数组来实现数据存储的
3）ArrayList 基等同于Vector，除了ArrayList是线程不安全的（执行效率高），
    所以在多线程情况下，不建议使用ArrayList

ArrayList的底层结果和原码分析：
1）ArrayList中维护了一个Object类型的数组
    transient Object[] elementData; // non-private to simplify nested class access
    // transient 表示瞬间，短暂的，表示该属性不会被序列号
    public ArrayList() {
        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;
    }// 无参构造器，创建一个空数组
    public void ensureCapacity(int minCapacity) {
        if (minCapacity > elementData.length
            && !(elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA
                 && minCapacity <= DEFAULT_CAPACITY)) {
            modCount++;  // 记录集合被修改的次数
            grow(minCapacity); //如果容量不够就去扩容
        }
    }
    private Object[] grow(int minCapacity) {
    int oldCapacity = elementData.length;
    if (oldCapacity > 0 || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
        int newCapacity = ArraysSupport.newLength(oldCapacity,
                minCapacity - oldCapacity, /* minimum growth */
                oldCapacity >> 1           /* preferred growth */);// 1.5倍的大小来进行扩容
                
        return elementData = Arrays.copyOf(elementData, newCapacity); // Arrays.copyOf()这种拷贝方式会保留原先的数据
    } else {
        return elementData = new Object[Math.max(DEFAULT_CAPACITY, minCapacity)];
    }
    }
    setting-->Build,Exection,Deployment-->Debugger-->Java-->取消勾选enable alternative view for Collection class
2）当创建ArrayList对象时，如果使用的是无参构造器，初始化容量为0
    首次添加时，扩容为10，如果再次扩容，则扩容elementData为1.5倍
3）当创建ArrayList对象时，如果使用的是指定大小的构造器，
   初始elementData容量为指定大小，如果再次扩容，则扩容elementData为1.5倍
    public ArrayList(int initialCapacity) {
        if (initialCapacity > 0) {
            this.elementData = new Object[initialCapacity];

Vector
1.  public class Vector<E>
        extends AbstractList<E>
        implements List<E>, RandomAccess, Cloneable, java.io.Serializable

2.  底层也是一个对象数组：protected Object[] elementData;
3.  Vector是线程同步的，即线程安全，Vector类的操作方法带有synchronized
4.  在开发中，需要线程安全时，考虑使用Vector

Vector和ArrayList比较
            底层结构    版本    线程安全（同步）效率    扩容倍数
ArrayList   可变数组    jdk1.2  不安全，效率高          如果有参构造，1.5倍。如果无参，第一次10，第二次以后1.5倍的大小来进行扩容
Vector      可变数组    jdk1.0  安全，效率不高          如果无参，默认10，满后，2倍扩，如果指定大小，则2倍扩容

LinkedList
public class LinkedList<E>
    extends AbstractSequentialList<E>
    implements List<E>, Deque<E>, Cloneable, java.io.Serializable
1）LinkedList底层实现了 双向链表 和 双端队列 特点
2）可以添加任意元素（元素可以重复），包括null
3）线程不安全，没有实现同步

LinkedList底层操作机制：
1）LinkedList底层维护了一个双向链表
2）LinkedList中维护了两个属性first和last分别指向首结点和尾结点
3）每个结点，里面又维护了prev,next,item三个属性，其中，prev指向前一个，next指向后一个节点，最终实现了双向链表。
4）所以说，LinkedList的元素的添加和删除，不是通过数组完成的，相对效率较高
5）
    /**
     * Pointer to first node.
     */
    transient Node<E> first;

    /**
     * Pointer to last node.
     */
    transient Node<E> last;
    private static class Node<E> {
        E item;
        Node<E> next;
        Node<E> prev;

        Node(Node<E> prev, E element, Node<E> next) {
            this.item = element;
            this.next = next;
            this.prev = prev;
        }
    }

//自定义双向链表

public class Collection01 {
    public static void main(String[] args) {
        Node jack = new Node("jack");
        Node tom = new Node("tom");
        Node fll = new Node("fll");

        //连接三个结点，形成双向链表
        jack.next = tom;
        tom.next = fll;
        fll.prev = tom;
        tom.prev = jack;

        Node first = jack;
        Node last = fll;

        //从头到尾遍历
        while(true){
            if(first == null){
                break;
            }
            System.out.println(first);
            first = first.next;
        }
    }
}
class Node{
    public Object item;
    Node prev;
    Node next;

    public Node(Object item) {
        this.item = item;
    }
    public String toString(){
        return "Node name=" + item;
    }
}

LinkedListCRUD：增删改查
    public boolean add(E e) {
        linkLast(e); //尾插法
            void linkLast(E e) {
                final Node<E> l = last;
                final Node<E> newNode = new Node<>(l, e, null);
                last = newNode;
                if (l == null)
                    first = newNode;
                else
                    l.next = newNode;
                size++;
                modCount++;
            }
        return true;
    }

    public E remove() {
        return removeFirst();
            public E removeFirst() {
                final Node<E> f = first;
                if (f == null)
                    throw new NoSuchElementException();
                return unlinkFirst(f);
            }
                private E unlinkFirst(Node<E> f) {
                    // assert f == first && f != null;
                    final E element = f.item;
                    final Node<E> next = f.next;
                    f.item = null;
                    f.next = null; // help GC
                    first = next;
                    if (next == null)
                        last = null;
                    else
                        next.prev = null;
                    size--;
                    modCount++;
                    return element;
                }
    }

    public E set(int index, E element) {
        checkElementIndex(index);
        Node<E> x = node(index);
        E oldVal = x.item;
        x.item = element;
        return oldVal;
    }
        
    public E get(int index) {
        checkElementIndex(index);
        return node(index).item;
    }

ArrayList和LinkedList比较
                底层结构      增删的效率            改查的效率
ArrayList       可变数组      较低，数组扩容         较高
LinkedList      双向链表      较高，通过链表追加     较低

如何选择ArrayList和LinkedList：
1）如果改查操作比较多，选择ArrayList
2）如果增删操作比较多，选择LinkedList
3）一般来说，在程序中，80%-90%都是查询，因此大部分情况下使用ArrayList
4）在项目中，要根据业务来合理的选择