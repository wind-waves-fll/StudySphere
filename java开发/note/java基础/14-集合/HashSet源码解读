

1. 执行构造器
public HashSet() {
    map = new HashMap<>();
}
2. 执行 add()
// PRESENT 是共享的
static final Object PRESENT = new Object();
public boolean add(E e) {
    return map.put(e, PRESENT)==null;
}

3. 执行put(),该方法会执行 hash(key) 得到key对应的hash值，并不完全是hashCode()
public V put(K key, V value) {
    return putVal(hash(key), key, value, false, true);
}

static final int hash(Object key) {
    int h;
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
}

4. 执行putVal()

final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
boolean evict) {
    Node<K,V>[] tab; Node<K,V> p; int n, i;
    // 如果当前table 是null 或者 大小=0
    // 则第一次扩容，到16的大小
    if ((tab = table) == null || (n = tab.length) == 0)
        n = (tab = resize()).length;
    //  (1) 根据key得到的hash值 去计算该key应该存放到table表的哪个索引位置
    //      并把这个位置的对象。赋给 p
    //  (2) 如果p 为null, 则表示还没有存放元素。就创建一个Node
    //  (3)  
    if ((p = tab[i = (n - 1) & hash]) == null)
        tab[i] = newNode(hash, key, value, null);
    else {
        // 一个开发技巧提示：在需要局部变量（辅助）时候，在需要的时候再创建。
        Node<K,V> e; K k; 
        if (p.hash == hash && 
        // 如果当前索引位置对应的链表的第一个元素和准备添加的key的hash值一样
        // 并且满足 
            //（1）准备加入的key和p指向的Node结点的key 是同一个对象
            //（2）p 指向的Node 结点的key 的equals() 和准备加入的key比较后相同
        ((k = p.key) == key || (key != null && key.equals(k))))
            e = p;
        // 再判断 p 是不是一颗红黑树
        // 如果是一颗红黑树，就调用 putTreeVal来进行添加
        else if (p instanceof TreeNode)
            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);
        else {
        // 如果当前table对应的索引位置已经是一个链表，就使用for循环
        // （1）依次与该链表的每个元素比较后 ， 都不相同，则加入到该链表的最后
        //       注意把元素添加到链表后，立即判断 该链表是否达到8个结点
        //         就调用treeifyBin(), 对当前的链表进行树化
        //         注意：再转成红黑树时，还进行一个判断，如果该table数组的大小 < 64
        //               会先对table扩容
        //          如果上面条件不成立，才进行转成红黑树
        //  (2) 如果有相同的，直接break;     
            for (int binCount = 0; ; ++binCount) {
                if ((e = p.next) == null) {
                    p.next = newNode(hash, key, value, null);
                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                        treeifyBin(tab, hash);
                    break;
                }
                if (e.hash == hash &&
                    ((k = e.key) == key || (key != null && key.equals(k))))
                        break;
                    // p = e 使链表一值往后移
                    p = e;
                }
        }
        if (e != null) { // existing mapping for key
            V oldValue = e.value;
            if (!onlyIfAbsent || oldValue == null)
                e.value = value;
            afterNodeAccess(e);
            return oldValue;
        }
    }
    ++modCount;
    if (++size > threshold)
        resize();
    afterNodeInsertion(evict);
    return null;
}