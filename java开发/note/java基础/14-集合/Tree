TreeSet:（TreeSet的底层还是TreeMap）
1. 当我们使用无参构造器，创建TreeSet时，仍然是无序的
2. 如果想要按照字符串大小来排序
3. 使用TreeSet 提供的一个构造器，可以传入一个比较器
    public TreeSet(Comparator<? super E> comparator) {
            this(new TreeMap<>(comparator));
    }
    //可以传入一个匿名内部类
    TreeSet treeSet = new TreeSet(new Comparator() {
        @Override
        // 调用compareTo进行字符串大小的比较
        public int compare(Object o1, Object o2) {
            return ((String) o1).compareTo((String) o2);
            }
    });

    1. 构造器把传入的比较器对象，赋给了TreeSet的底层 TreeMap的属性this.comparator
        public TreeMap(Comparator<? super K> comparator) {
            this.comparator = comparator;
        }
    2. 在调用 treeSet.add(""),底层会调用我们定义的比较器
        Comparator<? super K> cpr = comparator;
        if (cpr != null) {
            do {
                parent = t;
                //动态绑定到我们的匿名内部类（对象）的compare
                cmp = cpr.compare(key, t.key);
                if (cmp < 0)
                    t = t.left;
                else if (cmp > 0)
                    t = t.right;
                else { //如果相等，返回0，就替换
                    V oldValue = t.value;
                    if (replaceOld || oldValue == null) {
                        t.value = value;
                    }
                    return oldValue;
                }
            } while (t != null);
        } 

TreeMap:
默认的构造器是无序的

public TreeMap(Comparator<? super K> comparator) {
    this.comparator = comparator;
}


















