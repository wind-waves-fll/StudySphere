Annotation注解
也被称为元数据，用于修饰包、类、方法、属性、构造器、局部变量

和注释一样，注解不影响程序逻辑，但注解可以被编译和运行，
相当于嵌入在代码中的补充信息。

JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等
JavaEE中，注解占据了更重要的角色，例如用来配置应用程序的任何切面
代替JavaEE旧版所遗留的繁冗代码和XML配置等。

三个基本的Annotation:
1）@Override:    重写父类的方法
    如果写了@Override注解，编译器就会去检查该方法是否重写了父类的方法
    如果重写了，则编译通过，否则，编译错误。
    Override的定义：
    即@interface 表示一个注解类，比如Override
        @Target(ElementType.METHOD) //说明@Override只能修饰方法
        //@Target修饰注解的注解，称为元注解
        @Retention(RetentionPolicy.SOURCE)
        public @interface Override {
        }

2）@Deprecated:  表示某个程序元素（类，方法等）已过时
    过时，即不推荐，但也可以使用
    可以做到新旧版本的过度。
    @Documented
    @Retention(RetentionPolicy.RUNTIME)
    @Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE})
    public @interface Deprecated {
        String since() default "";
        boolean forRemoval() default false;
    }


3）@SuppressWarning: 抑制编译器警告
    @SuppressWarning({"all"})  //所有的警告都不显示


4）JDK的元Annotation
    JDK的元注解用于修饰其他注解

    1》Retention  // 指定注解的作用范围
    2》Target     // 指定注解可以在哪些地方使用
    3》Documented // 指定该注解是否会在javadoc体现
    4》Inherited  // 子类会继承父类注解